{"version":3,"sources":["components/Snake.js","components/Food.js","App.js","serviceWorker.js","index.js"],"names":["Snake","props","snakeDots","map","dot","i","style","left","top","className","key","getRandomCoordinates","Math","floor","random","initialState","food","speed","direction","score","hint","App","state","onKeyDown","e","window","event","keyCode","alert","setState","moveSnake","dots","head","length","push","shift","document","onkeydown","this","checkIfOutOfBorders","checkIfCollapsed","eat","gameOver","snake","pop","forEach","largeSnake","newSnake","unshift","Container","Food","Component","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.1e018dad.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport default function Snake(props) {\r\n  return (\r\n    <div>\r\n      {props.snakeDots.map((dot, i) => {\r\n        const style = {\r\n          left: `${dot[0]}%`,\r\n          top: `${dot[1]}%`,\r\n        };\r\n        return <div className=\"snake\" key={i} style={style}></div>;\r\n      })}\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nexport default (props) => {\r\n  const style = {\r\n    left: `${props.dot[0]}%`,\r\n    top: `${props.dot[1]}%`,\r\n  };\r\n\r\n  return <div className=\"food\" style={style}></div>;\r\n};\r\n","import React from \"react\";\nimport Snake from \"./components/Snake\";\nimport Food from \"./components/Food\";\nimport swal from \"sweetalert\";\n\nimport { Component } from \"react\";\nimport { Container } from \"react-bootstrap\";\n\nconst getRandomCoordinates = () => {\n  let min = 1;\n  let max = 98;\n  let x = Math.floor((Math.random() * (max - min + 1) + min) / 2) * 2;\n  let y = Math.floor((Math.random() * (max - min + 1) + min) / 2) * 2;\n  return [x, y];\n};\nconst initialState = {\n  food: getRandomCoordinates(),\n  speed: 60,\n  direction: \"RIGHT\",\n  snakeDots: [\n    [0, 0],\n    [2, 0],\n  ],\n  score: 0,\n  hint: \"\",\n};\n\nclass App extends Component {\n  state = initialState;\n  componentDidMount() {\n    //  setInterval(this.moveSnake, this.state.speed);\n    document.onkeydown = this.onKeyDown;\n  }\n\n  componentDidUpdate() {\n    this.checkIfOutOfBorders();\n    this.checkIfCollapsed();\n    this.eat();\n  }\n\n  onKeyDown = (e) => {\n    e = e || window.event;\n    switch (e.keyCode) {\n      case 1:\n        if (e.keyCode === 32) {\n          alert(\"Game Paused\");\n        }\n        break;\n      case 38:\n        this.setState({ direction: \"UP\" });\n        break;\n      case 40:\n        this.setState({ direction: \"DOWN\" });\n        break;\n      case 37:\n        this.setState({ direction: \"LEFT\" });\n        break;\n      case 39:\n        this.setState({ direction: \"RIGHT\" });\n        break;\n    }\n  };\n  //creating new head for each possible direction\n  moveSnake = () => {\n    let dots = [...this.state.snakeDots];\n    let head = dots[dots.length - 1];\n\n    switch (this.state.direction) {\n      case \"RIGHT\":\n        head = [head[0] + 2, head[1]];\n        break;\n      case \"LEFT\":\n        head = [head[0] - 2, head[1]];\n        break;\n      case \"DOWN\":\n        head = [head[0], head[1] + 2];\n        break;\n      case \"UP\":\n        head = [head[0], head[1] - 2];\n        break;\n    }\n    dots.push(head);\n    dots.shift();\n    this.setState({\n      snakeDots: dots,\n    });\n  };\n  checkIfOutOfBorders() {\n    let head = this.state.snakeDots[this.state.snakeDots.length - 1];\n    if (head[0] >= 100 || head[1] >= 100 || head[0] < 0 || head[1] < 0) {\n      this.gameOver();\n    }\n  }\n  checkIfCollapsed() {\n    let snake = [...this.state.snakeDots];\n    let head = snake[snake.length - 1];\n    snake.pop();\n    snake.forEach((dot) => {\n      if (head[0] === dot[0] && head[1] === dot[1]) {\n        this.gameOver();\n      }\n    });\n  }\n  eat() {\n    let head = this.state.snakeDots[this.state.snakeDots.length - 1];\n    let food = this.state.food;\n    if (head[0] === food[0] && head[1] === food[1]) {\n      this.setState({\n        food: getRandomCoordinates(),\n        score: this.state.score + 1,\n      });\n      this.largeSnake();\n    }\n  }\n\n  largeSnake() {\n    let newSnake = [...this.state.snakeDots];\n    newSnake.unshift([]);\n    this.setState({\n      snakeDots: newSnake,\n    });\n  }\n\n  gameOver() {\n    alert(`Game Over please try again, ${this.state.score}`);\n    // swal(`Game Over, Your Score is ${this.state.score}`, {\n    //   buttons: [\"Play Again\", \"Exit?\"],\n    // });\n    this.setState(initialState);\n  }\n  render() {\n    return (\n      <div>\n        <Container>\n          <h1 className=\"score\">Score: {this.state.score}</h1>\n          <div className=\"game-area\">\n            <Snake snakeDots={this.state.snakeDots}></Snake>\n            <Food dot={this.state.food} />\n          </div>\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}